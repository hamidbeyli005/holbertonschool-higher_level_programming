
The ``add_integer`` module


	Adds two integers.

	Prototype: def add_integer(a, b=98):
	a and b must be integers or floats, otherwise raise a TypeError exception
	with the message a must be an integer or b must be an integer
	a and b must be first casted to integers if they are float
	Returns an integer: the addition of a and b

>>> add_integer = __import__('0-add_integer').add_integer

>>> add_integer(4, 9)
13

>>> add_integer(4.5, 6)
10

>>> add_integer(6, 5.5)
11

>>> add_integer(2.5, 1.5)
3

>>> add_integer(-5, 5)
0

>>> add_integer(7, "test")
Traceback (most recent call last):
  File "./0-main.py", line 16, in <module>
    add_integer(5,'5')
  File "/root/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("a must be an integer or b must be an integer")
TypeError: a must be an integer or b must be an integer

>>> add_integer("5", 1)
Traceback (most recent call last):
  File "./0-main.py", line 16, in <module>
    add_integer("5",5)
  File "/root/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("a must be an integer or b must be an integer")
TypeError: a must be an integer or b must be an integer

>>> add_integer("test", "test")
Traceback (most recent call last):
  File "./0-main.py", line 16, in <module>
    add_integer(5,'5')
  File "/root/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("a must be an integer or b must be an integer")
TypeError: a must be an integer or b must be an integer
